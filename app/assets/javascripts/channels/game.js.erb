$(".games.show").ready(function(){
  // Getting gameId from games#show
  var gameId = $("div#gameId").data("gameId");
  App.game = App.cable.subscriptions.create( { channel: "GameChannel", game_id: gameId }, {  
    connected: function(){
      // Called when the subscription is ready for use on the server
    },

    disconnected: function(){
      // Called when the subscription has been terminated by the server
    },

    received: function(data){
      if (data.pieceId !== undefined){
        var pieceId = data.pieceId,
          pieceHTML =  $('img#piece[data-id="' + pieceId + '"]'),
          startY = data.startY,
          destSqX = data.destSqX,
          destSqY = data.destSqY,
          isEnPassantCapture = data.isEnPassantCapture
        if (isEnPassantCapture){
          $("td#" + destSqX + startY).empty();
        }
        pieceHTML.attr("data-x", destSqX);
        pieceHTML.attr("data-y", destSqY); 
        destSqHTML = $("td#" + destSqX + destSqY);
        destSqHTML.empty();
        destSqHTML.append(pieceHTML);
        pieceHTML.css({"top":"initial", "left":"initial"});      

        var displayWhiteKingCheck = function(whiteKingCheck){
          if (whiteKingCheck == true){
            $("#messages").append('<p>The white king is in check!</p>');
          } else {
            $("#messages").empty();
          }
        }

        var displayBlackKingCheck = function(blackKingCheck){
          if (blackKingCheck == true){
            $("#messages").append('<p>The black king is in check!</p>');
          } else {
            $("#messages").empty();
          }
        }

        if (data.pieceColor == "white"){
          gon.watch('black_king_check', displayBlackKingCheck);
        }

        if (data.pieceColor == "black"){
          gon.watch('white_king_check', displayWhiteKingCheck);
        }
      }

      var reloadGameWithGameOverMessage = function(gameState){
        if(gameState != 0){
          location.reload();
        }
      }
      gon.watch('game_state', reloadGameWithGameOverMessage)
    },

    broadcastPieceMovement: function(pieceId, pieceColor, gameId, startX, startY, destSqX, destSqY, isEnPassantCapture){
      this.perform('broadcast_piece_movement', {
        pieceId: pieceId, 
        pieceColor: pieceColor,
        gameId: gameId,
        startX: startX,
        startY: startY,
        destSqX: destSqX,
        destSqY: destSqY,
        isEnPassantCapture: isEnPassantCapture
      })
    },
  })
})



