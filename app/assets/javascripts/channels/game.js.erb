$(".games.show").ready(function(){

  // Getting gameId from games#show
  var gameId = $("div#gameId").data("gameId");
  App.game = App.cable.subscriptions.create( { channel: "GameChannel", game_id: gameId }, {  
    connected: function(){
      // Called when the subscription is ready for use on the server
    },

    disconnected: function(){
      // Called when the subscription has been terminated by the server
    },

    received: function(data){
      if (data.pieceId !== undefined){
        var whitePieces = $("#piece[data-color='white']");
        var blackPieces = $("#piece[data-color='black']");
        var pieceHTML;
        var pieceId;
        var pieceMovedType;
        var startX;
        var startY;
        var gameId = $("div#gameId").attr("data-game-id");
        var gameState = $("div#gameState").attr("data-game-state");

        whitePieces.mousedown(function(e){
          pieceHTML = $(e.target);
          pieceId = $(e.target).attr('data-id');
          pieceColor = $(e.target).attr('data-color');
          pieceMovedType = $(e.target).attr('data-type');
          startX = $(e.target).attr('data-x');
          startY = $(e.target).attr('data-y');
        });

        blackPieces.mousedown(function(e){
          pieceHTML = $(e.target);
          pieceId = $(e.target).attr('data-id');
          pieceColor = $(e.target).attr('data-color');
          pieceMovedType = $(e.target).attr('data-type');
          startX = $(e.target).attr('data-x');
          startY = $(e.target).attr('data-y');
        });

        pieceId = data.pieceId;
        pieceHTML =  $('img#piece[data-id="' + pieceId + '"]'),
        startY = data.startY,
        destSqX = data.destSqX,
        destSqY = data.destSqY,
        isEnPassantCapture = data.isEnPassantCapture;
        if (isEnPassantCapture){
          $("td#" + destSqX + startY).empty();
        }
        pieceHTML.attr("data-x", destSqX);
        pieceHTML.attr("data-y", destSqY);
        destSqHTML = $("td#" + destSqX + destSqY);
        destSqHTML.empty();
        destSqHTML.append(pieceHTML);
        pieceHTML.css({"top":"initial", "left":"initial"});      

        var displayWhiteKingCheck = function(whiteKingCheck){
          $("#tempMessages").empty();
          if (whiteKingCheck == true){
            $("#tempMessages").append('<p>The white king is in check!</p>');
          }
        }

        var displayBlackKingCheck = function(blackKingCheck){
          $("#tempMessages").empty();
          if (blackKingCheck == true){
            $("#tempMessages").append('<p>The black king is in check!</p>');
          }
        }

        if (data.pieceColor == "white"){
          gon.watch("black_king_check", displayBlackKingCheck);
        }; 

        if (data.pieceColor == "black"){
          gon.watch("white_king_check", displayWhiteKingCheck);
        };

        var currentUserId = $("#currentUser").attr("data-current-user-id");
        var whitePlayerId = $("#whitePlayer").attr("data-user-white-id");
        var blackPlayerId = $("#blackPlayer").attr("data-user-black-id");

        var setPlayerTurn = function(isWhiteTurn){
          $("#turn").empty();
          if(isWhiteTurn == true && currentUserId == whitePlayerId){
            whitePieces.draggable({
              containment: "#chessboard tbody",
              cursor: "move",
            }).draggable("enable");
            blackPieces.draggable().draggable("disable");
            $("#turn").append("<p>The current turn belongs to: " + gon.user_white_name + "</p>" );
          } 
          if(isWhiteTurn == true && currentUserId != whitePlayerId){
            whitePieces.draggable().draggable("disable");
            blackPieces.draggable().draggable("disable");
            $("#turn").append("<p>The current turn belongs to: " + gon.user_white_name + "</p>" );
          }
          if(isWhiteTurn == false && currentUserId == blackPlayerId){
            whitePieces.draggable().draggable("disable");
            blackPieces.draggable({
              containment: "#chessboard tbody",
              cursor: "move",
            }).draggable("enable");
            $("#turn").append("<p>The current turn belongs to: " + gon.user_black_name + "</p>");
          }
          if(isWhiteTurn == false && currentUserId != blackPlayerId){
            whitePieces.draggable().draggable("disable");
            blackPieces.draggable().draggable("disable");
            $("#turn").append("<p>The current turn belongs to: " + gon.user_black_name + "</p>");
          }
        }
        gon.watch("is_white_turn", setPlayerTurn);
      }

      if (typeof data.user_black_id !== 'undefined'){
        location.reload();
      }

      var reloadDueToGameState = function(gameState){
        if(gameState != 0){
          location.reload();
        }
      }
      gon.watch("game_state", reloadDueToGameState);
      
    },

    broadcastPieceMovement: function(pieceId, pieceColor, gameId, startX, startY, destSqX, destSqY, isEnPassantCapture){
      this.perform('broadcast_piece_movement', {
        pieceId: pieceId,
        pieceColor: pieceColor,
        gameId: gameId,
        startX: startX,
        startY: startY,
        destSqX: destSqX,
        destSqY: destSqY,
        isEnPassantCapture: isEnPassantCapture
      })
    },
  })
})



